/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {

        private RobotWorldDec world;

        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

  final public boolean inicio(StringBuffer sistema) throws ParseException {
          salida = new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      label_1:
      while (true) {
        block();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
          sistema.append(salida);
          {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                       {if (true) return false;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void block() throws ParseException {
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_MOVE:
    case T_TURNRIGHT:
    case T_PUT:
    case T_PICK:
    case T_POP:
    case T_SKIP:
    case DEFVAR:
    case TURN:
    case FACE:
    case GO_END:
    case MOVE_DIR:
    case RUN_DIRS:
    case MOVE_FACE:
      one_line();
      break;
    case IF:
      if_conditional();
      break;
    case LOOP:
      loop_conditional();
      break;
    case REPEAT:
      repeat();
      break;
    case DEFUN:
      defun();
      break;
    default:
      jj_la1[2] = jj_gen;
      conditional();
    }
    jj_consume_token(37);
  }

  final public void command() throws ParseException {
          int x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_MOVE:
      jj_consume_token(T_MOVE);
      x = numero();
                                   world.moveForward(x);salida = "Command: Moveforward";
      break;
    case T_TURNRIGHT:
      jj_consume_token(T_TURNRIGHT);
      jj_consume_token(36);
      jj_consume_token(37);
                                     world.turnRight();salida = "Command: Turnright";
      break;
    case T_POP:
      jj_consume_token(T_POP);
      jj_consume_token(36);
      x = numero();
      jj_consume_token(37);
                                          world.popBalloons(x); salida = "Command: Pop";
      break;
    case T_PUT:
      jj_consume_token(T_PUT);
      jj_consume_token(38);
      put();
      break;
    case T_PICK:
      jj_consume_token(T_PICK);
      jj_consume_token(38);
      pick();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFVAR:
      jj_consume_token(DEFVAR);
      jj_consume_token(WORD);
      jj_consume_token(NUMERO);
      break;
    case TURN:
      jj_consume_token(TURN);
      jj_consume_token(38);
      jj_consume_token(DIR);
      break;
    case FACE:
      jj_consume_token(FACE);
      jj_consume_token(38);
      jj_consume_token(FACE_TO);
      break;
    case MOVE_DIR:
      jj_consume_token(MOVE_DIR);
      jj_consume_token(38);
      jj_consume_token(DIR);
      break;
    case RUN_DIRS:
      jj_consume_token(RUN_DIRS);
      jj_consume_token(36);
      label_2:
      while (true) {
        jj_consume_token(38);
        jj_consume_token(DIR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(37);
      break;
    case MOVE_FACE:
      jj_consume_token(MOVE_FACE);
      jj_consume_token(NUMERO);
      jj_consume_token(38);
      jj_consume_token(FACE_TO);
      break;
    case GO_END:
      jj_consume_token(GO_END);
      break;
    case T_SKIP:
      jj_consume_token(T_SKIP);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void conditional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING_P:
    case CAN_PUT_P:
    case CAN_PICK_P:
    case CAN_MOVE_P:
    case BLOCKED_P:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLOCKED_P:
        jj_consume_token(BLOCKED_P);
        break;
      case FACING_P:
        jj_consume_token(FACING_P);
        break;
      case CAN_PUT_P:
        jj_consume_token(CAN_PUT_P);
        break;
      case CAN_PICK_P:
        jj_consume_token(CAN_PICK_P);
        break;
      case CAN_MOVE_P:
        jj_consume_token(CAN_MOVE_P);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_MOVE:
    case T_TURNRIGHT:
    case T_PUT:
    case T_PICK:
    case T_POP:
      command();
      break;
    case T_SKIP:
    case DEFVAR:
    case TURN:
    case FACE:
    case GO_END:
    case MOVE_DIR:
    case RUN_DIRS:
    case MOVE_FACE:
      instruction();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void if_conditional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(36);
    conditional();
    jj_consume_token(37);
    label_3:
    while (true) {
      block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
    }
  }

  final public void loop_conditional() throws ParseException {
    jj_consume_token(LOOP);
    jj_consume_token(36);
    conditional();
    jj_consume_token(37);
    label_4:
    while (true) {
      block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
    }
  }

  final public void repeat() throws ParseException {
    jj_consume_token(REPEAT);
    jj_consume_token(NUMERO);
    label_5:
    while (true) {
      block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
  }

  final public void defun() throws ParseException {
    jj_consume_token(DEFUN);
    jj_consume_token(WORD);
    jj_consume_token(36);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
      case WORD:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        jj_consume_token(WORD);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(37);
    label_7:
    while (true) {
      block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
    }
  }

  final public void put() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_CHIPS:
      jj_consume_token(T_CHIPS);
      f = numero();
                                    world.putChips(f); salida = "Command:  Put Chips";
      break;
    case T_BALLOONS:
      jj_consume_token(T_BALLOONS);
      f = numero();
                                       world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pick() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_CHIPS:
      jj_consume_token(T_CHIPS);
      f = numero();
                                    world.pickChips(f);salida = "Command:  Pick chips";
      break;
    case T_BALLOONS:
      jj_consume_token(T_BALLOONS);
      f = numero();
                                       world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */
  final public int numero() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUMERO);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Number out of bounds: " + token.image + "!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x1,0x7fbfe0,0x3e0,0x0,0x7e8400,0x4000,0xf800000,0xf800000,0x7e87e0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x10,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x10,0x3,0x3,0x10,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
