options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{

	private RobotWorldDec world;
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| 	"\n"
}

TOKEN: /* Nombres de Comandos */
{
			< T_MOVE:  "move" >
		| 	< T_TURNRIGHT: "turnright" >
		| 	< T_PUT: "put" >
		| 	< T_PICK: "pick" >
		|   < T_POP: "pop" >
		| 	< T_SKIP: "skip" >
		| 	< IF: "if" >
		| 	< LOOP: "loop" >
		| 	< REPEAT: "repeat" >
		|	< NOT: "not" >
		| 	< DEFVAR: "defvar" >
		| 	< DEFUN: "defun" >
		| 	< TURN: "turn" >
		| 	< FACE: "face" >
		|   < GO_END: "goend" >
		| 	< MOVE_DIR: "move-dir" >
		| 	< RUN_DIRS: "run-dirs" >
		| 	< MOVE_FACE: "move_face" >
		| 	< FACING_P: "facing-p" >
		| 	< CAN_PUT_P: "can-put-p" > 
		|	< CAN_PICK_P: "can-pick-p" >
		| 	< CAN_MOVE_P: "can-move-p" >
		| 	< BLOCKED_P: "blocked-p" >
		| 	< FACE_TO: "north" | "east" | "south" | "west" >
		|	< DIR: "front" | "right" | "left" | "back" | "around" >
}

TOKEN:
{
			< T_BALLOONS: "ballons" >
		|	< T_CHIPS: "chips" >
}

TOKEN:
{
			< NUMERO: (<DIGIT>)+ >
		| 	< WORD: (< LETTER >)+ >
		|  	< #DIGIT: ["0"-"9"] >
		| 	< #LETTER: ["a"-"z"] >
}

	boolean inicio(StringBuffer sistema):
	{
	  salida = new String();
	}
	{
	  (
	    block()
	  )+

	{
	  sistema.append(salida);
	  return true;
	}
	
	|	<EOF> {return false;}
	
	}

	void block():
	{}
	{
	  "(" (one_line() | if_conditional() | loop_conditional() | repeat() | defun()| conditional()) ")"
	}

	void command():
	{
	  int x;
	}
	{
	  (
	    < T_MOVE > x=numero() {world.moveForward(x);salida = "Command: Moveforward";}
	  | < T_TURNRIGHT > "(" ")" {world.turnRight();salida = "Command: Turnright";}
	  | < T_POP > "(" x=numero() ")" {world.popBalloons(x); salida = "Command: Pop";}
	  | < T_PUT > ":"  put()
	  | < T_PICK > ":"  pick()
	  )
	}

	void instruction():
	{}
	{
	  (
	    < DEFVAR > < WORD > < NUMERO >
	  | < TURN > ":" < DIR >
	  | < FACE > ":" < FACE_TO >
	  | < MOVE_DIR > ":" < DIR >
	  | < RUN_DIRS > "(" (":" < DIR >)+ ")"
	  | < MOVE_FACE > < NUMERO > ":" < FACE_TO >
	  | < GO_END >
	  | < T_SKIP >
	  )	}

	void conditional():
	{}
	{
	  (< NOT >)? (< BLOCKED_P > | < FACING_P > | < CAN_PUT_P > | < CAN_PICK_P > | < CAN_MOVE_P >)?
	}

	void one_line():
	{}
	{
	  (command() | instruction())
	}
	
	void if_conditional():
	{}
	{
	  < IF > "(" conditional() ")" (block())+
	}

	void loop_conditional():
	{}
	{
	  < LOOP > "(" conditional() ")" (block())+
	}

	void repeat():
	{}
	{
	  < REPEAT > < NUMERO > (block())+
	}

	void defun():
	{}
	{
	  < DEFUN > < WORD > "(" (< WORD > | < NUMERO >)* ")" (block())+
	}
	
	void put() :
	{
		int f=1;	
	}
	{
	  (
	    ( <T_CHIPS> f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
	  | ( <T_BALLOONS> f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})
	  )
	}

	void pick():
	{
		int f=1;	
	}
	{
	  (
	    ( <T_CHIPS> f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
	  | ( <T_BALLOONS> f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})
	  )
	}

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: " + token.image + "!!");
			}
			return total;
		}
	}

	